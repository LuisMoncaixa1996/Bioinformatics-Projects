-- MySQL Script generated by MySQL Workbench
-- Fri Jan 29 16:30:36 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema TRABALHO
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema TRABALHO
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `TRABALHO` DEFAULT CHARACTER SET utf8 ;
USE `TRABALHO` ;

-- -----------------------------------------------------
-- Table `TRABALHO`.`SALA`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TRABALHO`.`SALA` (
  `ID_sala` CHAR(4) NOT NULL,
  `bloco` VARCHAR(15) NOT NULL,
  `piso` VARCHAR(2) NOT NULL,
  PRIMARY KEY (`ID_sala`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TRABALHO`.`MODALIDADE`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TRABALHO`.`MODALIDADE` (
  `ID_modalidade` CHAR(3) NOT NULL,
  `descricao` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ID_modalidade`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TRABALHO`.`TIPO`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TRABALHO`.`TIPO` (
  `ID_tipo` CHAR(5) NOT NULL,
  `descricao` VARCHAR(50) NOT NULL,
  `preco` DECIMAL(5,2) NOT NULL,
  `ID_modalidade` CHAR(3) NOT NULL,
  PRIMARY KEY (`ID_tipo`),
  INDEX `fk_MODALIDADE_TIPO1_idx` (`ID_modalidade` ASC) VISIBLE,
  CONSTRAINT `fk_id_modalidade`
    FOREIGN KEY (`ID_modalidade`)
    REFERENCES `TRABALHO`.`MODALIDADE` (`ID_modalidade`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TRABALHO`.`MORADA`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TRABALHO`.`MORADA` (
  `ID_morada` VARCHAR(10) NOT NULL,
  `cod_postal` CHAR(8) NOT NULL,
  `n_porta` INT NOT NULL,
  `apart` VARCHAR(5) NULL,
  `localidade` VARCHAR(45) NOT NULL,
  `rua` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ID_morada`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TRABALHO`.`TECNICO`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TRABALHO`.`TECNICO` (
  `ID_tecnico` CHAR(6) NOT NULL,
  `primeiro_nome` VARCHAR(45) NOT NULL,
  `ultimos_nomes` VARCHAR(45) NOT NULL,
  `n_cc` CHAR(8) NOT NULL,
  `data_nasc` DATE NOT NULL,
  `estado_civil` VARCHAR(3) NOT NULL,
  `contacto` INT(9) NOT NULL,
  `ID_morada` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`ID_tecnico`),
  INDEX `fk_id_morada_idx` (`ID_morada` ASC) VISIBLE,
  CONSTRAINT `fk_id_morada_t`
    FOREIGN KEY (`ID_morada`)
    REFERENCES `TRABALHO`.`MORADA` (`ID_morada`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TRABALHO`.`MEDICO`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TRABALHO`.`MEDICO` (
  `ID_medico` CHAR(6) NOT NULL,
  `primeiro_nome` VARCHAR(45) NOT NULL,
  `ultimos_nomes` VARCHAR(45) NOT NULL,
  `cedula` CHAR(5) NOT NULL,
  `n_cc` CHAR(8) NOT NULL,
  `contacto` INT(9) NOT NULL,
  `data_nasc` DATE NOT NULL,
  `ID_morada` VARCHAR(10) NOT NULL,
  `estado_civil` VARCHAR(3) NOT NULL,
  PRIMARY KEY (`ID_medico`),
  INDEX `fk_morada_idx` (`ID_morada` ASC) VISIBLE,
  CONSTRAINT `fk_morada_m`
    FOREIGN KEY (`ID_morada`)
    REFERENCES `TRABALHO`.`MORADA` (`ID_morada`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TRABALHO`.`UTENTE`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TRABALHO`.`UTENTE` (
  `ID_utente` CHAR(6) NOT NULL,
  `primeiro_nome` VARCHAR(45) NOT NULL,
  `ultimos_nomes` VARCHAR(45) NOT NULL,
  `n_utente` INT(9) NOT NULL,
  `n_cc` INT(6) NOT NULL,
  `n_contribuinte` INT(9) NOT NULL,
  `data_nasc` DATE NOT NULL,
  `contacto` INT(9) NOT NULL,
  `estado_civil` VARCHAR(3) NOT NULL,
  `profissao` VARCHAR(45) NOT NULL,
  `genero` CHAR(1) NOT NULL,
  `primeiro_nome_emerg` VARCHAR(45) NULL,
  `ultimos_nomes_emerg` VARCHAR(45) NULL,
  `contacto_emerg` INT(9) NULL,
  `ID_morada` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`ID_utente`),
  INDEX `fk_id_morada_idx` (`ID_morada` ASC) VISIBLE,
  CONSTRAINT `fk_id_morada_u`
    FOREIGN KEY (`ID_morada`)
    REFERENCES `TRABALHO`.`MORADA` (`ID_morada`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TRABALHO`.`EXAME`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TRABALHO`.`EXAME` (
  `datahora` DATETIME NOT NULL,
  `ID_sala` CHAR(4) NOT NULL,
  `ID_tecnico` CHAR(6) NOT NULL,
  `ID_utente` CHAR(6) NOT NULL,
  `ID_medico` CHAR(6) NOT NULL,
  `ID_tipo` CHAR(5) NOT NULL,
  `preco_final` DECIMAL(5,2) NOT NULL,
  PRIMARY KEY (`datahora`, `ID_sala`, `ID_tecnico`, `ID_utente`),
  INDEX `fk_EXAME_MODALIDADE1_idx` (`ID_tipo` ASC) VISIBLE,
  INDEX `fk_EXAME_TECNICO1_idx` (`ID_tecnico` ASC) VISIBLE,
  INDEX `fk_EXAME_MEDICO1_idx` (`ID_medico` ASC) VISIBLE,
  INDEX `fk_EXAME_SALA1_idx` (`ID_sala` ASC) VISIBLE,
  INDEX `fk_EXAME_UTENTE1_idx` (`ID_utente` ASC) VISIBLE,
  CONSTRAINT `fk_id_TIPO_e`
    FOREIGN KEY (`ID_tipo`)
    REFERENCES `TRABALHO`.`TIPO` (`ID_tipo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_id_TECNICO_e`
    FOREIGN KEY (`ID_tecnico`)
    REFERENCES `TRABALHO`.`TECNICO` (`ID_tecnico`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ID_MEDICO_e`
    FOREIGN KEY (`ID_medico`)
    REFERENCES `TRABALHO`.`MEDICO` (`ID_medico`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ID_SALA_e`
    FOREIGN KEY (`ID_sala`)
    REFERENCES `TRABALHO`.`SALA` (`ID_sala`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ID_UTENTE_e`
    FOREIGN KEY (`ID_utente`)
    REFERENCES `TRABALHO`.`UTENTE` (`ID_utente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TRABALHO`.`CONSULTA`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TRABALHO`.`CONSULTA` (
  `data_hora` DATETIME NOT NULL,
  `ID_medico` CHAR(6) NOT NULL,
  `ID_utente` CHAR(6) NOT NULL,
  `ID_sala` CHAR(4) NOT NULL,
  PRIMARY KEY (`data_hora`, `ID_sala`, `ID_medico`, `ID_utente`),
  INDEX `fk_id_medico_idx` (`ID_medico` ASC) VISIBLE,
  INDEX `fk_id_utente_idx` (`ID_utente` ASC) VISIBLE,
  INDEX `fk_id_sala_idx` (`ID_sala` ASC) VISIBLE,
  CONSTRAINT `fk_id_medico_c`
    FOREIGN KEY (`ID_medico`)
    REFERENCES `TRABALHO`.`MEDICO` (`ID_medico`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_id_utente_c`
    FOREIGN KEY (`ID_utente`)
    REFERENCES `TRABALHO`.`UTENTE` (`ID_utente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_id_sala_c`
    FOREIGN KEY (`ID_sala`)
    REFERENCES `TRABALHO`.`SALA` (`ID_sala`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `TRABALHO` ;

-- -----------------------------------------------------
-- procedure preco
-- -----------------------------------------------------

DELIMITER $$
USE `TRABALHO`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `preco`(ID CHAR(5)) RETURNS decimal(5,2)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	DECLARE P DECIMAL(5,2);
	CALL preco(ID,P);
RETURN P;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function preco
-- -----------------------------------------------------

DELIMITER $$
USE `TRABALHO`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `preco`(ID CHAR(5)) RETURNS decimal(5,2)
    READS SQL DATA
    DETERMINISTIC
BEGIN
	DECLARE P DECIMAL(5,2);
	CALL preco(ID,P);
RETURN P;
END$$

DELIMITER ;
USE `TRABALHO`;

DELIMITER $$
USE `TRABALHO`$$
CREATE DEFINER=`root`@`localhost` TRIGGER `utente_BEFORE_INSERT` BEFORE INSERT ON `utente` FOR EACH ROW IF EXISTS (
		select * from UTENTE t
        WHERE NEW.n_utente=t.n_utente AND NEW.ID_utente <> t.ID_utente)
        THEN
		BEGIN
			SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT='Erro: Numero de utente existente';
		END;
	END IF$$

USE `TRABALHO`$$
CREATE DEFINER=`root`@`localhost` TRIGGER `exame_BEFORE_INSERT` BEFORE INSERT ON `exame` FOR EACH ROW IF EXISTS (
	SELECT * FROM EXAME E
	WHERE NEW.datahora=E.datahora AND NEW.ID_sala=E.ID_sala)
	THEN
	BEGIN
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT='Erro: Sala ocupada nesse horário';
	END;
ELSE
IF EXISTS (
	SELECT * FROM EXAME E
	WHERE NEW.datahora=E.datahora AND NEW.ID_utente=E.ID_utente)
	THEN
	BEGIN
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT='Erro: Utente já tem exame nesse horário';
	END;
ELSE
IF EXISTS (
	SELECT * FROM CONSULTA C
	WHERE NEW.datahora=C.data_hora AND NEW.ID_utente=C.ID_utente)
	THEN
	BEGIN
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT='Erro: Utente já tem consulta nesse horário';
	END;
ELSE
IF EXISTS (
	SELECT * FROM EXAME E
	WHERE NEW.datahora=E.datahora AND NEW.ID_tecnico=E.ID_tecnico)
	THEN
	BEGIN
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT='Erro: Técnico já tem exame nesse horário';
	END;
ELSE
IF EXISTS (
	SELECT * FROM SALA S
	WHERE NEW.ID_sala=S.ID_sala AND S.bloco <> 'Diagnóstico')
	THEN
	BEGIN
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT='Erro: Não é sala de exame';
	END;
END IF;
END IF;
END IF;
END IF;
END IF;$$

USE `TRABALHO`$$
CREATE DEFINER=`root`@`localhost` TRIGGER `exame_BEFORE_UPDATE` BEFORE UPDATE ON `exame` FOR EACH ROW IF EXISTS (
	SELECT * FROM EXAME E
	WHERE NEW.datahora=E.datahora AND NEW.ID_sala=E.ID_sala)
	THEN
	BEGIN
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT='Erro: Sala ocupada nesse horário';
	END;
ELSE
IF EXISTS (
	SELECT * FROM EXAME E
	WHERE NEW.datahora=E.datahora AND NEW.ID_utente=E.ID_utente)
	THEN
	BEGIN
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT='Erro: Utente já tem exame nesse horário';
	END;
ELSE
IF EXISTS (
	SELECT * FROM CONSULTA C
	WHERE NEW.datahora=C.data_hora AND NEW.ID_utente=C.ID_utente)
	THEN
	BEGIN
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT='Erro: Utente já tem consulta nesse horário';
	END;
ELSE
IF EXISTS (
	SELECT * FROM EXAME E
	WHERE NEW.datahora=E.datahora AND NEW.ID_tecnico=E.ID_tecnico)
	THEN
	BEGIN
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT='Erro: Técnico já tem exame nesse horário';
	END;
END IF;
END IF;
END IF;
END IF;$$

USE `TRABALHO`$$
CREATE DEFINER=`root`@`localhost` TRIGGER `consulta_BEFORE_INSERT` BEFORE INSERT ON `consulta` FOR EACH ROW IF EXISTS (
	SELECT * FROM CONSULTA C
	WHERE NEW.data_hora=C.data_hora AND NEW.ID_sala=C.ID_sala)
	THEN
	BEGIN
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT='Erro: Sala ocupada nesse horário';
	END;
ELSE
IF EXISTS (
	SELECT * FROM CONSULTA C
	WHERE NEW.data_hora=C.data_hora AND NEW.ID_utente=C.ID_utente)
	THEN
	BEGIN
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT='Erro: Utente já tem consulta nesse horário';
	END;
ELSE
IF EXISTS (
	SELECT * FROM EXAME E
	WHERE NEW.data_hora=E.datahora AND NEW.ID_utente=E.ID_utente)
	THEN
	BEGIN
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT='Erro: Utente já tem exame nesse horário';
	END;
ELSE
IF EXISTS (
	SELECT * FROM CONSULTA C
	WHERE NEW.data_hora=C.data_hora AND NEW.ID_medico=C.ID_medico)
	THEN
	BEGIN
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT='Erro: Médico já tem consulta nesse horário';
	END;
ELSE
IF EXISTS (
	SELECT * FROM SALA S
	WHERE NEW.ID_sala=S.ID_sala AND S.bloco <> 'Consultas')
	THEN
	BEGIN
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT='Erro: Não é sala de consulta';
	END;
END IF;
END IF;
END IF;
END IF;
END IF;$$

USE `TRABALHO`$$
CREATE DEFINER=`root`@`localhost` TRIGGER `consulta_BEFORE_UPDATE` BEFORE UPDATE ON `consulta` FOR EACH ROW IF EXISTS (
	SELECT * FROM CONSULTA C
	WHERE NEW.data_hora=C.data_hora AND NEW.ID_sala=C.ID_sala)
	THEN
	BEGIN
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT='Erro: Sala ocupada nesse horário';
	END;
ELSE
IF EXISTS (
	SELECT * FROM CONSULTA C
	WHERE NEW.data_hora=C.data_hora AND NEW.ID_utente=C.ID_utente)
	THEN
	BEGIN
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT='Erro: Utente já tem consulta nesse horário';
	END;
ELSE
IF EXISTS (
	SELECT * FROM EXAME E
	WHERE NEW.data_hora=E.datahora AND NEW.ID_utente=E.ID_utente)
	THEN
	BEGIN
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT='Erro: Utente já tem exame nesse horário';
	END;
ELSE
IF EXISTS (
	SELECT * FROM CONSULTA C
	WHERE NEW.data_hora=C.data_hora AND NEW.ID_medico=C.ID_medico)
	THEN
	BEGIN
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT='Erro: Médico já tem consulta nesse horário';
	END;
ELSE
IF EXISTS (
	SELECT * FROM SALA S
	WHERE NEW.ID_sala=S.ID_sala AND S.bloco <> 'Consultas')
	THEN
	BEGIN
		SIGNAL SQLSTATE '02000' SET MESSAGE_TEXT='Erro: Não é sala de consulta';
	END;
END IF;
END IF;
END IF;
END IF;
END IF;$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
